version: 2.1


commands:
   # Exercise - Rollback
  destroy_environment:
    steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


  
jobs:
  
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli  #The job code uses amazon/aws-cli docker image that has AWS CLI installed already. 
      # the AWS cli crdentials that we have set up as enviroment variables in the prohect settin on circleci, are used in this image
    steps:
      - checkout
      - run: pwd 
      - run: ls -la 
      - run: cd ~ 
      - run: ls -la 
      - run: ls -la | grep "temp"
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}\
              --region us-east-1


  # Exercise: Config and Deployment
  # configure_infrastructure: 
  #   docker:
  #     - image: cimg/base:2023.02
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
              
  #         fingerprints: 
            
  #           - "6f:19:cc:65:5b:b5:b5:da:69:c8:31:f0:5e:0f:21:13"
      
      
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           sudo apt install software-properties-common 
  #           sudo add-apt-repository --yes --update ppa:ansible/ansible
  #           sudo apt install ansible 

  #     - run: ansible --version 
     
  #     - run: 
  #         name: Run Playbook and Configure server
  #         command: |
  #           ansible-playbook -i inventory.txt main.yml 
      
       
  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID:0:5} 
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          command:  return 1
      - destroy_environment  

  # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
# Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
    - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: Execute bucket.yml - Create Cloudformation Stack
        command: |
          aws cloudformation deploy \
          --template-file bucket.yml \
          --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:5} \
          --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:5}"
    # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
    - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:5} --delete

  
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
# Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:5}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive


              
          





workflows:
 
  myWorkflow:
    jobs:
      - create_infrastructure 
      # - configure_infrastructure
          
      # - smoke_test:
      #     requires:
      #       - create_infrastructure

      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production